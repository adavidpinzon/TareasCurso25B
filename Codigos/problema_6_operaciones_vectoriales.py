# -*- coding: utf-8 -*-
"""problema 6 operaciones vectoriales.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q9rKGe8-D6U-KO1GnzWWcH-zhQdVmKmI
"""

#Operaciones vectoriales (Problema 6)
import sympy as sp
from sympy.vector import CoordSys3D, express

# Configurar sistema coordenado
S = CoordSys3D('S')
e1, e2, e3 = S.i, S.j, S.k

# Definir vectores
a = 1*e1 + 2*e2 + 3*e3
b = 4*e1 + 5*e2 + 6*e3
c = 3*e1 + 2*e2 + 1*e3
d = 6*e1 + 5*e2 + 4*e3

# Función para calcular ángulo
def angulo_vectores(u, v):
    cos_theta = sp.simplify(u.dot(v) / (u.magnitude() * v.magnitude()))
    theta_rad = sp.acos(cos_theta)
    theta_deg = theta_rad * 180 / sp.pi
    return theta_rad, theta_deg.evalf()

# (a) Sumas vectoriales
suma1 = a + b + c + d
suma2 = a + b - c - d
suma3 = a - b + c - d
suma4 = -a + b - c + d

# (b) Ángulos con vectores base
ang_a_e1 = angulo_vectores(a, e1)
ang_b_e2 = angulo_vectores(b, e2)
ang_c_e3 = angulo_vectores(c, e3)

# (c) Magnitudes
mag_a = a.magnitude().evalf()
mag_b = b.magnitude().evalf()
mag_c = c.magnitude().evalf()
mag_d = d.magnitude().evalf()

# (d) Ángulos entre pares
ang_ab = angulo_vectores(a, b)
ang_cd = angulo_vectores(c, d)

# (e) Proyección de a sobre b
proy_ab = (a.dot(b) / b.magnitude()**2) * b

# (f) Comprobación coplanaridad
triple_product = c.dot(a.cross(b))
coplanar = sp.simplify(triple_product) == 0

# (g) Producto punto
punto = (a + b).dot(c + d)

# (h) Productos cruz
cross_ab = a.cross(b)
cross_bc = b.cross(c)
cross_cd = c.cross(d)

# Ángulos con d
ang_ab_d = angulo_vectores(cross_ab, d)
ang_bc_d = angulo_vectores(cross_bc, d)
ang_cd_d = angulo_vectores(cross_cd, d)

# (i) Triple producto escalar
triple = c.dot(a.cross(b))

# Resultados
print("*** Operaciones vectoriales ***")
print("\nVectores originales:")
print(f"a = {a}")
print(f"b = {b}")
print(f"c = {c}")
print(f"d = {d}")

print("\n(a) Sumas vectoriales:")
print(f"a+b+c+d = {suma1}")
print(f"a+b-c-d = {suma2}")
print(f"a-b+c-d = {suma3}")
print(f"-a+b-c+d = {suma4}")

print("\n(b) Ángulos con vectores base:")
print(f"Ángulo a-e1: {ang_a_e1[1]:.2f}°")
print(f"Ángulo b-e2: {ang_b_e2[1]:.2f}°")
print(f"Ángulo c-e3: {ang_c_e3[1]:.2f}°")

print("\n(c) Magnitudes:")
print(f"|a| = {mag_a:.4f}")
print(f"|b| = {mag_b:.4f}")
print(f"|c| = {mag_c:.4f}")
print(f"|d| = {mag_d:.4f}")

print("\n(d) Ángulos entre vectores:")
print(f"a y b: {ang_ab[1]:.2f}°")
print(f"c y d: {ang_cd[1]:.2f}°")

print("\n(e) Proyección de a sobre b:")
sp.pprint(proy_ab.to_matrix(S))

print("\n(f) ¿Son a, b, c coplanares?")
print("Producto triple escalar (c · (a × b)) =", triple_product)
print("¿Coplanar?", coplanar)

print("\n(g) (a+b)·(c+d) =", punto)

print("\n(h) Productos cruz:")
print(f"a×b = {cross_ab}")
print(f"b×c = {cross_bc}")
print(f"c×d = {cross_cd}")

print("\n   Ángulos con d:")
print(f"a×b y d: {ang_ab_d[1]:.2f}°")
print(f"b×c y d: {ang_bc_d[1]:.2f}°")
print(f"c×d y d: {ang_cd_d[1]:.2f}°")

print("\n(i) Triple producto escalar c·(a×b) =", triple)